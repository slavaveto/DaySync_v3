const {app, BrowserWindow, Notification, screen, Tray, shell, Menu, ipcMain, dialog} = require("electron");

const path = require("path");
const fs = require("fs");
const {nativeImage} = require("electron");

let mainWindow, calendarWindow, todayWindow
const {createCalendarWindow} = require('./winCalendar');
//const {createTodayWindow} = require('./winToday');

const {trayIconCountHandler} = require('./iconTray');
const {dockIconHandler} = require('./iconDock');

const {setupPowerMonitor} = require("./powerMonitor");
const {calendar} = require("@heroui/react");

const HOST = "2000";
const ENABLE_TRAY = true; // ‚úÖ –ï—Å–ª–∏ false ‚Äî —Ç—Ä–µ–π –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è
const ENABLE_DOCK = true; // ‚úÖ –ï—Å–ª–∏ false ‚Äî —É–±–∏—Ä–∞–µ–º –∏–∑ Dock (—Ç–æ–ª—å–∫–æ macOS)

// üìå –§–∞–π–ª, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
const SETTINGS_PATH = path.join(app.getPath("userData"), "daysync3-window-settings.json");

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫–Ω–∞
function loadWindowBounds() {
    try {
        if (fs.existsSync(SETTINGS_PATH)) {
            return JSON.parse(fs.readFileSync(SETTINGS_PATH, "utf-8"));
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫–Ω–∞:", error);
    }
    return null;
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–Ω–∞
function saveWindowBounds(bounds) {
    try {
        fs.writeFileSync(SETTINGS_PATH, JSON.stringify(bounds));
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫–Ω–∞:", error);
    }
}

let win;
let tray;
let isQuitting = false; // ‚úÖ –§–ª–∞–≥ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞

async function createMainWindow() {
    try {
        const savedBounds = loadWindowBounds();
        const primaryDisplay = screen.getPrimaryDisplay().workAreaSize;

        win = new BrowserWindow({
            width: savedBounds?.width || Math.min(primaryDisplay.width, 800),
            height: savedBounds?.height || Math.min(primaryDisplay.height, 600),
            x: savedBounds?.x ?? undefined,
            y: savedBounds?.y ?? undefined,
            frame: true, // ‚úÖ –í–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            titleBarStyle: "default",
            resizable: true,
            minHeight: 500,
            webPreferences: {
                preload: path.join(__dirname, "preload.js"),
                partition: 'persist:electron-isolated', // üõ°Ô∏è –¥–æ–±–∞–≤—å —ç—Ç–æ!
            },
        });

        mainWindow = win;
        setupPowerMonitor(win);

        //win.webContents.session.clearStorageData({
        //    storages: ['cookies', 'serviceworkers']
        //}).then(() => {
        //    console.log('‚úÖ –û—á–∏—Å—Ç–∏–ª–∏ —Å—Ç–∞—Ä—ã–µ cookies –∏ service workers');
        //    win.loadURL("http://localhost:" + HOST);
        //});

        win.loadURL("http://localhost:" + HOST);

        win.webContents.setWindowOpenHandler(({ url }) => {
            shell.openExternal(url);
            return { action: 'deny' };
        });

        win.webContents.on('will-navigate', (event, navigationUrl) => {
            const parsedUrl = new URL(navigationUrl);
            if (parsedUrl.origin !== `http://localhost:${HOST}`) {
                event.preventDefault();
                shell.openExternal(navigationUrl);
            }
        });

        win.on("resize", () => saveWindowBounds(win.getBounds()));
        win.on("move", () => saveWindowBounds(win.getBounds()));

        win.on("close", (event) => {
            if (!isQuitting) {
                event.preventDefault();
                win.hide();
            }
        });

        if (ENABLE_TRAY) {
            createTray();
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞:", error);
    }
}


function createTray() {
    const iconPath = path.resolve(__dirname, "icons", "tray_icon@2x.png");
    tray = new Tray(iconPath);

    const contextMenu = Menu.buildFromTemplate([
        // { label: "–û—Ç–∫—Ä—ã—Ç—å", click: showWindow }, // ‚úÖ –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ `showWindow()`
        {label: "–í—ã—Ö–æ–¥", click: quitApp},
    ]);

    tray.setToolTip("–ú–æ—ë Electron-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
    tray.setContextMenu(contextMenu);

    tray.on("click", () => {
        showWindow(); // ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ
    });
    trayIconCountHandler(tray);
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ (–±–æ–ª—å—à–µ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º)
function showWindow() {
    if (!win) return;
    if (win.isMinimized()) win.restore(); // üî• –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
    win.show();
    win.focus();
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function quitApp() {
    if (isQuitting) return; // üî• –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã

    isQuitting = true; // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
    if (tray) tray.destroy(); // –£–¥–∞–ª—è–µ–º –∏–∫–æ–Ω–∫—É
    if (win) win.destroy(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
    app.quit(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∞–µ–º Electron
}

app.whenReady().then(async () => {
    await createMainWindow();
    calendarWindow = await createCalendarWindow(HOST);
    //todayWindow = await createTodayWindow(HOST);

    // const dockIconPath = path.join(__dirname, 'electron', 'icons', 'dock_icon.png');
    // if (process.platform === 'darwin') {
    //     const icon = await dockIconHandler(dockIconPath);
    //     app.dock.setIcon(icon);
    // }

    if (!ENABLE_DOCK && process.platform === 'darwin') {
        app.dock.hide();
    }
    console.log("‚úÖ Electron –∑–∞–ø—É—â–µ–Ω!");
})
    .catch(console.error);

ipcMain.on('show-notification', (_event, {title, body}) => {
    // –î–ª—è macOS/Linux/Windows ‚Äî —Ä–æ–¥–Ω–æ–π Notification
    new Notification({
        title,
        body,
        silent: false
        // icon: path.join(__dirname, "electron", "icons", "dock_icon.png")
    })
        // n.once('click', () => {
        //     if (mainWindow) mainWindow.show();
        // });
        // n.show();
        .show();
});

// ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.on("before-quit", () => {
    isQuitting = true; // üî• –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã `win.on("close")` –Ω–µ –º–µ—à–∞–ª –≤—ã—Ö–æ–¥—É
});

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on("unhandledRejection", (reason, promise) => {
    console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:", reason);
});
