'use client';

import React, { useState, useEffect, useCallback } from 'react';
import ReactFlow, {
    MiniMap,
    Controls,
    Background,
    useNodesState,
    useEdgesState,
    addEdge,
    Node,
    Edge,
    Connection,
    BackgroundVariant,
    MarkerType,
} from 'reactflow';
import 'reactflow/dist/style.css';

interface ProjectItem {
    id: string;
    name: string;
    path: string;
    type: 'file' | 'folder';
    fileType?: 'component' | 'page' | 'hook' | 'utility' | 'context' | 'types';
    imports?: string[];
    exports?: string[];
    dependencies?: string[];
}

interface ProjectNode extends Node {
    data: ProjectItem & {
        label: string;
        isClickable?: boolean;
    };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
function getFileType(fileName: string): ProjectItem['fileType'] {
    if (fileName.includes('page.tsx')) return 'page';
    if (fileName.startsWith('use') && fileName.endsWith('.ts')) return 'hook';
    if (fileName.toLowerCase().includes('context')) return 'context';
    if (fileName.endsWith('.ts') && !fileName.endsWith('.tsx')) return 'types';
    if (fileName.endsWith('.tsx') || fileName.endsWith('.jsx')) return 'component';
    return 'utility';
}

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
function getFileColor(fileType: ProjectItem['fileType']): string {
    switch (fileType) {
        case 'page': return '#2196F3';
        case 'component': return '#4CAF50';
        case 'hook': return '#9C27B0';
        case 'context': return '#FF5722';
        case 'types': return '#607D8B';
        case 'utility': return '#FF9800';
        default: return '#666';
    }
}

// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ (–∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤)
const fileDependencies: Record<string, string[]> = {
    'app/page.tsx': ['app/context.tsx', 'app/types.ts'],
    'app/main/common/QuickNotes.tsx': ['app/main/common/context_dnd.tsx', 'app/main/common/context_misc.tsx'],
    'app/main/common/context_dnd.tsx': ['app/context.tsx'],
    'app/main/common/context_misc.tsx': ['app/context.tsx', 'app/init/usePersistentState.ts'],
    'app/dev-tools/page.tsx': ['app/types.ts'],
    'app/layout.tsx': ['app/context.tsx', 'app/init/providers/ThemeProvider.tsx'],
    'app/context.tsx': ['app/types.ts'],
};

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
const projectStructure = {
    'app': {
        files: [
            { name: 'page.tsx', deps: ['app/context.tsx', 'app/types.ts'] },
            { name: 'layout.tsx', deps: ['app/context.tsx'] },
            { name: 'context.tsx', deps: ['app/types.ts'] },
            { name: 'types.ts', deps: [] },
            { name: 'globals.css', deps: [] }
        ],
        folders: {
            'api': {
                files: [],
                folders: {}
            },
            'dev-tools': {
                files: [
                    { name: 'page.tsx', deps: ['app/types.ts'] }
                ],
                folders: {}
            },
            'init': {
                files: [
                    { name: 'logger.tsx', deps: [] },
                    { name: 'usePersistentState.ts', deps: [] },
                    { name: 'useWindowSize.ts', deps: [] }
                ],
                folders: {
                    'sync': { files: [], folders: {} },
                    'dbase': { files: [], folders: {} },
                    'providers': { files: [], folders: {} }
                }
            },
            'main': {
                files: [],
                folders: {
                    'common': {
                        files: [
                            { name: 'QuickNotes.tsx', deps: ['app/main/common/context_dnd.tsx', 'app/main/common/context_misc.tsx'] },
                            { name: 'context_dnd.tsx', deps: ['app/context.tsx'] },
                            { name: 'context_misc.tsx', deps: ['app/context.tsx', 'app/init/usePersistentState.ts'] }
                        ],
                        folders: {}
                    }
                }
            },
            'win_calendar': {
                files: [],
                folders: {}
            }
        }
    }
};

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
function getAllProjectFiles(): ProjectItem[] {
    const allFiles: ProjectItem[] = [];
    
    function traverseStructure(structure: any, currentPath: string) {
        if (structure.files) {
            structure.files.forEach((file: any) => {
                const fileName = typeof file === 'string' ? file : file.name;
                const deps = typeof file === 'object' ? file.deps : [];
                
                allFiles.push({
                    id: `${currentPath}/${fileName}`,
                    name: fileName,
                    path: `${currentPath}/${fileName}`,
                    type: 'file',
                    fileType: getFileType(fileName),
                    dependencies: deps,
                    imports: [],
                    exports: []
                });
            });
        }
        
        if (structure.folders) {
            Object.keys(structure.folders).forEach(folderName => {
                traverseStructure(structure.folders[folderName], `${currentPath}/${folderName}`);
            });
        }
    }
    
    traverseStructure(projectStructure.app, 'app');
    return allFiles;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
function getCurrentLevelItems(path: string): ProjectItem[] {
    const pathParts = path.split('/').filter(part => part !== '');
    let current: any = projectStructure;

    for (const part of pathParts) {
        current = current[part];
        if (!current) return [];
    }

    const items: ProjectItem[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    if (current.files) {
        current.files.forEach((file: any) => {
            const fileName = typeof file === 'string' ? file : file.name;
            const deps = typeof file === 'object' ? file.deps : [];

            items.push({
                id: `${path}/${fileName}`,
                name: fileName,
                path: `${path}/${fileName}`,
                type: 'file',
                fileType: getFileType(fileName),
                dependencies: deps,
                imports: [],
                exports: []
            });
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏
    if (current.folders) {
        Object.keys(current.folders).forEach(folderName => {
            items.push({
                id: `${path}/${folderName}`,
                name: folderName,
                path: `${path}/${folderName}`,
                type: 'folder'
            });
        });
    }

    return items;
}

export default function ProjectVisualizerPage() {
    const [nodes, setNodes, onNodesChange] = useNodesState([]);
    const [edges, setEdges, onEdgesChange] = useEdgesState([]);
    const [currentPath, setCurrentPath] = useState<string>('app');
    const [breadcrumbs, setBreadcrumbs] = useState<string[]>(['app']);
    const [showDependencies, setShowDependencies] = useState(false);
    const [selectedNode, setSelectedNode] = useState<string | null>(null);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const generateNodesForLevel = useCallback((path: string) => {
        const items = getCurrentLevelItems(path);
        const newNodes: ProjectNode[] = [];
        const newEdges: Edge[] = [];

        items.forEach((item, index) => {
            const x = (index % 6) * 200 + 100;
            const y = Math.floor(index / 6) * 150 + 100;

            const isFolder = item.type === 'folder';
            const color = isFolder ? '#FFA726' : getFileColor(item.fileType);

            newNodes.push({
                id: item.id,
                type: 'default',
                position: { x, y },
                data: {
                    ...item,
                    label: isFolder ? `üìÅ ${item.name}` : item.name,
                    isClickable: isFolder
                },
                style: {
                    background: color,
                    color: 'white',
                    border: `2px solid ${color}`,
                    borderRadius: 8,
                    fontSize: 14,
                    fontWeight: 'bold',
                    cursor: isFolder ? 'pointer' : 'default',
                    minWidth: 120,
                    textAlign: 'center',
                    ...(selectedNode === item.id ? {
                        boxShadow: '0 0 20px rgba(255, 255, 255, 0.8)',
                        transform: 'scale(1.05)'
                    } : {})
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
            if (showDependencies && item.dependencies && item.type === 'file') {
                item.dependencies.forEach((dep: string) => {
                    // –ò—â–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    const allProjectFiles = getAllProjectFiles();
                    const targetFile = allProjectFiles.find(f => f.path === dep);
                    
                    if (targetFile) {
                        // –°–æ–∑–¥–∞–µ–º "–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π" —É–∑–µ–ª –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                        const ghostNodeId = `ghost-${dep}`;
                        const ghostExists = newNodes.find(n => n.id === ghostNodeId);
                        
                        if (!ghostExists) {
                            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π —É–∑–µ–ª –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                            newNodes.push({
                                id: ghostNodeId,
                                type: 'default',
                                position: { x: 50, y: 50 + newNodes.length * 100 },
                                data: {
                                    ...targetFile,
                                    label: `üìé ${targetFile.name}`,
                                    isClickable: false
                                },
                                style: {
                                    background: '#444',
                                    color: '#ccc',
                                    border: '2px dashed #666',
                                    borderRadius: 8,
                                    fontSize: 12,
                                    opacity: 0.7,
                                    minWidth: 120,
                                    textAlign: 'center'
                                }
                            });
                        }
                        
                        newEdges.push({
                            id: `${item.id}-${ghostNodeId}`,
                            source: item.id,
                            target: ghostNodeId,
                            type: 'smoothstep',
                            animated: selectedNode === item.id,
                            style: { 
                                stroke: selectedNode === item.id ? '#00ff00' : '#888',
                                strokeWidth: selectedNode === item.id ? 3 : 2,
                                strokeDasharray: '5,5' // –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                            },
                            markerEnd: {
                                type: MarkerType.ArrowClosed,
                                color: selectedNode === item.id ? '#00ff00' : '#888',
                            },
                        });
                    }
                    
                    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –±—ã–ª–æ)
                    const targetInCurrentLevel = items.find(i => i.path === dep);
                    if (targetInCurrentLevel) {
                        newEdges.push({
                            id: `${item.id}-${targetInCurrentLevel.id}`,
                            source: item.id,
                            target: targetInCurrentLevel.id,
                            type: 'smoothstep',
                            animated: selectedNode === item.id || selectedNode === targetInCurrentLevel.id,
                            style: { 
                                stroke: selectedNode === item.id ? '#00ff00' : '#888',
                                strokeWidth: selectedNode === item.id ? 3 : 2
                            },
                            markerEnd: {
                                type: MarkerType.ArrowClosed,
                                color: selectedNode === item.id ? '#00ff00' : '#888',
                            },
                        });
                    }
                });
            }
        });

        setNodes(newNodes);
        setEdges(newEdges);
    }, [setNodes, setEdges, showDependencies, selectedNode]);

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –ø–∞–ø–∫—É
    const navigateToFolder = useCallback((folderPath: string) => {
        setCurrentPath(folderPath);
        const pathParts = folderPath.split('/').filter(part => part !== '');
        setBreadcrumbs(pathParts);
        setSelectedNode(null);
        generateNodesForLevel(folderPath);
    }, [generateNodesForLevel]);

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    const navigateBack = useCallback(() => {
        if (breadcrumbs.length > 1) {
            const newBreadcrumbs = breadcrumbs.slice(0, -1);
            const newPath = newBreadcrumbs.join('/');
            setBreadcrumbs(newBreadcrumbs);
            setCurrentPath(newPath);
            setSelectedNode(null);
            generateNodesForLevel(newPath);
        }
    }, [breadcrumbs, generateNodesForLevel]);

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ö–ª–µ–±–Ω—ã–º –∫—Ä–æ—à–∫–∞–º
    const navigateToBreadcrumb = useCallback((index: number) => {
        const newBreadcrumbs = breadcrumbs.slice(0, index + 1);
        const newPath = newBreadcrumbs.join('/');
        setBreadcrumbs(newBreadcrumbs);
        setCurrentPath(newPath);
        setSelectedNode(null);
        generateNodesForLevel(newPath);
    }, [breadcrumbs, generateNodesForLevel]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–∑–ª–∞–º
    const onNodeClick = useCallback((event: React.MouseEvent, node: Node) => {
        if (node.data.type === 'folder') {
            navigateToFolder(node.data.path);
        } else {
            // –í—ã–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            setSelectedNode(selectedNode === node.id ? null : node.id);
        }
    }, [navigateToFolder, selectedNode]);

    const onConnect = useCallback(
        (params: Connection) => setEdges((eds) => addEdge(params, eds)),
        [setEdges]
    );

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const toggleDependencies = useCallback(() => {
        setShowDependencies(!showDependencies);
        setSelectedNode(null);
    }, [showDependencies]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    useEffect(() => {
        generateNodesForLevel(currentPath);
    }, [generateNodesForLevel, currentPath, showDependencies, selectedNode]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    useEffect(() => {
        generateNodesForLevel('app');
    }, []);

    const selectedNodeData = selectedNode ? nodes.find(n => n.id === selectedNode)?.data : null;

    return (
        <div className="min-h-screen bg-gray-900 text-white">
            <div className="p-4 border-b border-gray-700">
                <h1 className="text-2xl font-bold mb-4">
                    Project Structure Visualizer
                    <span className="text-sm text-gray-400 ml-2">
                        (—Å–æ —Å–≤—è–∑—è–º–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏)
                    </span>
                </h1>

                {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
                <div className="mb-4">
                    <div className="flex items-center space-x-2 text-sm">
                        <span className="text-gray-400">–ü—É—Ç—å:</span>
                        {breadcrumbs.map((crumb, index) => (
                            <React.Fragment key={index}>
                                <button
                                    className={`px-2 py-1 rounded transition-colors ${
                                        index === breadcrumbs.length - 1
                                            ? 'bg-blue-600 text-white'
                                            : 'bg-gray-600 hover:bg-gray-500 text-gray-200'
                                    }`}
                                    onClick={() => navigateToBreadcrumb(index)}
                                >
                                    {crumb}
                                </button>
                                {index < breadcrumbs.length - 1 && (
                                    <span className="text-gray-500">/</span>
                                )}
                            </React.Fragment>
                        ))}
                    </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <div className="flex flex-wrap gap-2 mb-4">
                    <button
                        className="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded transition-colors disabled:opacity-50"
                        onClick={navigateBack}
                        disabled={breadcrumbs.length <= 1}
                    >
                        ‚Üê –ù–∞–∑–∞–¥
                    </button>
                    <button
                        className="px-4 py-2 bg-green-600 hover:bg-green-700 rounded transition-colors"
                        onClick={() => navigateToFolder('app')}
                    >
                        üè† –í –∫–æ—Ä–µ–Ω—å
                    </button>
                    <button
                        className={`px-4 py-2 rounded transition-colors ${
                            showDependencies
                                ? 'bg-purple-600 hover:bg-purple-700'
                                : 'bg-gray-600 hover:bg-gray-700'
                        }`}
                        onClick={toggleDependencies}
                    >
                        üîó {showDependencies ? '–°–∫—Ä—ã—Ç—å —Å–≤—è–∑–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∏'}
                    </button>
                    {selectedNode && (
                        <button
                            className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded transition-colors"
                            onClick={() => setSelectedNode(null)}
                        >
                            ‚úï –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                        </button>
                    )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ */}
                {selectedNodeData && (
                    <div className="mb-4 p-3 bg-gray-800 rounded border-l-4 border-blue-500">
                        <h3 className="font-semibold text-blue-400 mb-2">
                            üìÑ {selectedNodeData.name}
                        </h3>
                        <div className="text-sm">
                            <p><span className="text-gray-400">–¢–∏–ø:</span> {selectedNodeData.fileType}</p>
                            <p><span className="text-gray-400">–ü—É—Ç—å:</span> {selectedNodeData.path}</p>
                            {selectedNodeData.dependencies && selectedNodeData.dependencies.length > 0 && (
                                <div className="mt-2">
                                    <span className="text-gray-400">–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</span>
                                    <ul className="mt-1 ml-4">
                                        {selectedNodeData.dependencies.map((dep: string) => (
                                            <li key={dep} className="text-green-400">‚Üí {dep}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* –õ–µ–≥–µ–Ω–¥–∞ */}
                <div className="mb-4">
                    <h3 className="text-sm font-semibold mb-2">–õ–µ–≥–µ–Ω–¥–∞:</h3>
                    <div className="flex flex-wrap gap-3 text-sm">
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded" style={{backgroundColor: '#FFA726'}}></div>
                            <span>üìÅ –ü–∞–ø–∫–∏ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã)</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded" style={{backgroundColor: getFileColor('page')}}></div>
                            <span>Pages</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded" style={{backgroundColor: getFileColor('component')}}></div>
                            <span>Components</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded" style={{backgroundColor: getFileColor('hook')}}></div>
                            <span>Hooks</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded" style={{backgroundColor: getFileColor('context')}}></div>
                            <span>Context</span>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="w-4 h-4 rounded" style={{backgroundColor: getFileColor('types')}}></div>
                            <span>Types</span>
                        </div>
                        {showDependencies && (
                            <div className="flex items-center gap-2">
                                <div className="w-8 h-1 bg-gray-500" style={{clipPath: 'polygon(0 50%, 100% 0, 100% 100%)'}}></div>
                                <span>‚Üí –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</span>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* React Flow Graph */}
            <div style={{ width: '100%', height: 'calc(100vh - 400px)' }}>
                <ReactFlow
                    nodes={nodes}
                    edges={edges}
                    onNodesChange={onNodesChange}
                    onEdgesChange={onEdgesChange}
                    onConnect={onConnect}
                    onNodeClick={onNodeClick}
                    fitView
                    className="bg-gray-800"
                >
                    <Controls className="bg-gray-700 border-gray-600" />
                    <MiniMap
                        className="bg-gray-700 border-gray-600"
                        nodeColor={(node) =>
                            node.data.type === 'folder' ? '#FFA726' : getFileColor(node.data.fileType)
                        }
                    />
                    <Background
                        variant={BackgroundVariant.Dots}
                        gap={12}
                        size={1}
                        color="#333"
                    />
                </ReactFlow>
            </div>

            <div className="p-4 border-t border-gray-700 text-sm text-gray-400">
                <p>üí° <strong>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</strong> üìÅ –ø–∞–ø–∫–∏ = –ø–µ—Ä–µ—Ö–æ–¥ ‚Ä¢ üìÑ —Ñ–∞–π–ª—ã = –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</p>
                <p className="mt-1">üîó –í–∫–ª—é—á–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏</p>
            </div>
        </div>
    );
}