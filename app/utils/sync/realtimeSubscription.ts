// utils/realtimeSubscription.ts
import {supabase} from "@/app/utils/dbase/supabaseClient";

let channelRef: any = null;

export async function subscribeToItems(
    user_id: string,
    onPayload: (payload: any) => void
) {
    const existingChannel = supabase.getChannels().find(
        (ch) => ch.topic === "realtime:items_sync"  // ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
    );
    //console.log("üì° Channels before subscribe:", supabase.getChannels().map(ch => ch.topic));
    if (existingChannel) {
        await supabase.removeChannel(existingChannel);
        // console.log("üõë –°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞");
    }

    const channel = supabase
        .channel("items_sync")
        .on(
            "postgres_changes",
            {
                event: "*",
                schema: "public",
                table: "items",
            },
            (payload: any) => {
                const incomingUserId =
                    (payload.new as Record<string, any>)?.user_id ||
                    (payload.old as Record<string, any>)?.user_id;

                if (incomingUserId !== user_id) {
                    // üü• –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return;
                }

                onPayload(payload); // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –Ω–∞—Ä—É–∂—É —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Å–≤–æ–µ–≥–æ user_id
            }
        )
        .subscribe();

    channelRef = channel;
    // console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id: ${user_id}`);
}

export async function unsubscribeFromItems() {
    const existingChannel = supabase.getChannels().find(
        (ch) => ch.topic === "realtime:items_sync"
    );

    if (existingChannel) {
        await supabase.removeChannel(existingChannel);
        console.log("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        channelRef = null;
    } else {
        console.log("üîé –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
    }
}