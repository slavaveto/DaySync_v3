import React, {useEffect, useRef, useState} from "react";
import {MdCloudDownload} from "react-icons/md";
import clsx from "clsx";
import {supabase} from "@/app/utils/dbase/supabaseClient";
import type {ItemType} from "@/app/types";
import {useMainContext} from "@/app/context";
import {Spinner} from "@heroui/react";
import {toast} from "react-hot-toast";
import {PingWatcher} from "@/app/utils/sync/pingWatcher";
import {subscribeToItems, unsubscribeFromItems} from "@/app/utils/sync/realtimeSubscription";
import {useDevice} from "@/app/utils/providers/MobileDetect";

export const DownloadButton = () => {
    const {
        items, setItems, userId, isUserActive, isUploadingData, hasLocalChanges,
        isDownloadingData, setIsDownloadingData, setSyncHighlight
    } = useMainContext();

    const {forcedMode, isMobile, isTablet, isDesktop} = useDevice();

    const [wasSyncedOk, setWasSyncedOk] = useState(false);
    const user_id = userId;

    const onPayloadRef = useRef<((payload: any) => void) | null>(null);

    const setupSubscription = async () => {
        await subscribeToItems(user_id ?? "", (payload) => {
            // console.log("üéØ payload:", payload);

            if (onPayloadRef.current) {
                onPayloadRef.current(payload);  // ‚úÖ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π handleIncomingPayload
            }

            const removed = payload.old as Partial<ItemType>;
            const incoming = (payload.new ?? payload.old) as Partial<ItemType>;

            if (payload.eventType === "DELETE") {
                // const lastAction = [...actionLogRef.current]
                //     .reverse()
                //     .find(entry => entry.item.id === removed.id && entry.action === "Delete");
                // if (!lastAction) {
                //     reloadAllItems();
                // }
                // return;
            }

            if (!incoming?.id) return;

            if ((payload.eventType === "INSERT" || payload.eventType === "UPDATE") && incoming) {
                const localItems = JSON.parse(localStorage.getItem("items") || "[]");
                const local = localItems.find((item: ItemType) => item.id === incoming.id);

                if (!local) {
                    reloadAllItems(incoming.id);
                    return;
                }

                if (!incoming.updated_at || !local.updated_at) return;

                if (new Date(incoming.updated_at) > new Date(local.updated_at)) {
                    reloadAllItems(incoming.id);
                }
            }
        });
    };

    useEffect(() => {
        if (!user_id) return;
        setupSubscription(); // ‚úÖ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
        reloadAllItems();    // ‚úÖ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–≥—Ä—É–∂–∞–µ–º
    }, [user_id]);

    useEffect(() => {
        // –ñ–¥—ë–º, –ø–æ–∫–∞ user_id —Å—Ç–∞–Ω–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–º
        if (!user_id) return;
        if (!(window as any).electron?.onPowerStatus) return;

        let didResume = false;  // —Ñ–ª–∞–∂–æ–∫, —á—Ç–æ –º—ã —É–∂–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ resumed

        const unsubscribe = (window as any).electron.onPowerStatus(
            ({ status }: { status: string; message: string }) => {
                // –ü—Ä–∏ —É—Ö–æ–¥–µ –≤ —Å–æ–Ω –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–∂–æ–∫
                if (status === "suspend" || status === "locked") {
                    didResume = false;
                    return;
                }
                // –ï—Å–ª–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å
                if (status === "resumed") {
                    didResume = true;
                    console.log("üü¢ resume ‚Äî –æ–±–Ω–æ–≤–ª—è—é");
                }
                // –ï—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –Ω–æ –¥–æ —ç—Ç–æ–≥–æ –ù–ï –±—ã–ª–æ resumed
                else if (status === "unlocked" && !didResume) {
                    console.log("üü¢ unlock –±–µ–∑ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ resume ‚Äî –æ–±–Ω–æ–≤–ª—è—é");
                } else {
                    // –ª–∏–±–æ unlock –ø–æ—Å–ª–µ resume, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –µ—â—ë ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    return;
                }

                // –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∞
                requestAnimationFrame(() => {
                    if (hasLocalChanges || isUploadingData) return;
                    setupSubscription();
                    reloadAllItems();
                });
            }
        );

        return () => {
            unsubscribe();
        };
    }, [user_id, hasLocalChanges, isUploadingData]);


    useEffect(() => {
        if (!isMobile) return; // –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª–∫–∏!

        function onVisibilityChange() {
            if (document.visibilityState !== 'visible') return;

            requestAnimationFrame(() => {
                // –ó–¥–µ—Å—å state –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
                if (hasLocalChanges || isUploadingData) return;

                setupSubscription();
                reloadAllItems();
            });
        }

        document.addEventListener("visibilitychange", onVisibilityChange);
        return () => {
            document.removeEventListener("visibilitychange", onVisibilityChange);
        };
    }, [isMobile, user_id, hasLocalChanges, isUploadingData,]);

    const lastReloadTimeRef = useRef<number>(0); //
    const highlightBufferRef = useRef<number[]>([]);
    const highlightClearTimeoutRef = useRef<NodeJS.Timeout | null>(null);

    async function reloadAllItems(highlightId?: number, onReloadComplete?: () => void) {
        const startTime = Date.now();
        setIsDownloadingData(true);

        try {
            const {data: freshItems, error} = await supabase
                .from("items")
                .select("*")
                .eq("user_id", user_id)
                .order("order", {ascending: true});

            const timeElapsed = Date.now() - startTime;
            const minTotal = 2000; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            const remaining = Math.max(0, minTotal - timeElapsed);

            if (remaining > 0) {
                await new Promise(resolve => setTimeout(resolve, remaining));
            }

            setIsDownloadingData(false);

            if (!error && freshItems) {
                setWasSyncedOk(true);
                const now = new Date().toISOString();

                setItems(prevItems => {
                    const freshMap = new Map(freshItems.map(item => [item.id, item]));
                    const removedItems = prevItems.filter(i => !freshMap.has(i.id));
                    const filtered = prevItems.filter(i => freshMap.has(i.id));

                    let changedCount = 0;
                    const updated = filtered.map(local => {
                        const remote = freshMap.get(local.id);
                        if (!remote) return local;
                        const isChanged = new Date(remote.updated_at) > new Date(local.updated_at);
                        if (isChanged) changedCount++;
                        return isChanged ? {...remote, synced_at: now} : local;
                    });

                    const localIds = new Set(prevItems.map(i => i.id));
                    const newItems = freshItems
                        .filter(i => !localIds.has(i.id))
                        .map(i => ({...i, synced_at: now}));

                    // ======= –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö =======
                    if (highlightId === undefined) {
                        const updatedIds: number[] = [];

                        // –ù–æ–≤—ã–µ
                        for (const item of newItems) {
                            if (item.sync_highlight) {
                                updatedIds.push(item.id);
                            }
                        }

                        // –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ
                        filtered.forEach(local => {
                            const remote = freshMap.get(local.id);
                            if (
                                remote &&
                                remote.sync_highlight && // <--- —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ sync_highlight –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
                                new Date(remote.updated_at) > new Date(local.updated_at)
                            ) {
                                updatedIds.push(remote.id);
                            }
                        });

                        if (updatedIds.length > 0) {

                            // –ü–æ–¥—Å—á—ë—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–æ–≤—ã—Ö –∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö
                            const newCount = newItems.filter(item => item.sync_highlight).length;
                            const changedCount = updatedIds.length - newCount;

                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Ç–æ–ª—å–∫–æ –Ω–µ –≤ render
                            setTimeout(() => {
                                toast.success(
                                    <div className="flex flex-col ml-2 gap-1 bg-content2 z-100">
                                        <div><span className="font-semibold">–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</span></div>
                                        <div>–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö: <span className="font-semibold pl-1">{newCount}</span>
                                        </div>
                                        <div>–û–±–Ω–æ–≤–ª–µ–Ω–æ:<span className="font-semibold pl-1">{changedCount}</span></div>
                                    </div>,
                                    {
                                        duration: 2000,
                                        className: 'border border-divider !bg-content2 !text-foreground',
                                        position: "bottom-center"
                                    }
                                );
                            }, 0);

                            setSyncHighlight(updatedIds);
                            if (highlightClearTimeoutRef.current) {
                                clearTimeout(highlightClearTimeoutRef.current);
                            }
                            highlightClearTimeoutRef.current = setTimeout(() => {
                                setSyncHighlight([]);
                            }, 6000);

                        } else {

                            setTimeout(() => {
                                toast.success(
                                    <div className="flex flex-col ml-2 gap-1 bg-content2 z-100">
                                        <div><span className="font-semibold">–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</span></div>
                                    </div>,
                                    {
                                        duration: 2000,
                                        className: 'border border-divider !bg-content2 !text-foreground',
                                        position: "bottom-center"
                                    }
                                );
                            }, 0);
                        }
                    }

                    return [...updated, ...newItems].sort((a, b) => a.order - b.order);
                });

                const timeSinceLastReload = startTime - lastReloadTimeRef.current;
                lastReloadTimeRef.current = startTime;

                if (highlightId !== undefined) {
                    const idsToHighlight = Array.isArray(highlightId) ? highlightId : [highlightId];

                    // üü¢ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ id, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç sync_highlight === true
                    const filteredIdsToHighlight = idsToHighlight.filter((id) => {
                        const item = freshItems.find((i) => i.id === id);
                        return item?.sync_highlight;
                    });

                    if (filteredIdsToHighlight.length === 0) {
                        return; // ‚ùå –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å ‚Äî –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É
                    }

                    if (timeSinceLastReload < 3000) {
                        // –ö–æ–ø–∏–º id –≤ –±—É—Ñ–µ—Ä–µ –±–µ–∑ –¥—É–±–ª–µ–π
                        highlightBufferRef.current = Array.from(new Set([
                            ...highlightBufferRef.current,
                            ...filteredIdsToHighlight,
                        ]));
                    } else {
                        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 —Å–µ–∫ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                        highlightBufferRef.current = filteredIdsToHighlight;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º highlight
                    setSyncHighlight(highlightBufferRef.current);

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (—Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ–º)
                    if (highlightClearTimeoutRef.current) {
                        clearTimeout(highlightClearTimeoutRef.current);
                    }
                    highlightClearTimeoutRef.current = setTimeout(() => {
                        highlightBufferRef.current = [];
                        setSyncHighlight([]);
                    }, 6000);
                }

                // üü¢ –í–æ—Ç —Ç—É—Ç —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, –∫–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ:
                if (onReloadComplete) {
                    onReloadComplete();
                }

            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ:", error);
            }

        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ reloadAllItems:", err);
        } finally {
            setIsDownloadingData(false);
        }

    }

    const [waitWake, setWaitWake] = useState(false);
    useEffect(() => {
        if (waitWake && user_id) {
            setWaitWake(false);
            setupSubscription();
            reloadAllItems();
        }
    }, [waitWake, user_id]);

    const showButton = false;

    return (
        <>
            {/*<PingWatcher*/}
            {/*    onWake={(onComplete) => {*/}
            {/*        if (!user_id) {*/}
            {/*            setWaitWake(() => true);   // –∂–¥—ë–º, –∫–æ–≥–¥–∞ user_id –ø–æ—è–≤–∏—Ç—Å—è*/}
            {/*            return;*/}
            {/*        }*/}
            {/*        setWaitWake(false);*/}
            {/*        setupSubscription();*/}
            {/*        reloadAllItems(undefined, () => onComplete());*/}
            {/*    }}*/}
            {/*/>*/}

            {showButton ? (
                <button
                    className={clsx(
                        "transition-all duration-200 pointer-events-none opacity-50",
                        isDownloadingData
                            ? "text-default-400"
                            : wasSyncedOk
                                ? "text-success"
                                : "text-default-400"
                    )}
                    // disabled={isDownloadingData}
                >
                    {isDownloadingData ? (
                        <Spinner size="sm" color={"success"} className="w-[26px] h-[20px]"/>
                    ) : (
                        <MdCloudDownload
                            size={isMobile ? 26 : 22}
                            className="w-[26px]"
                        />
                    )}
                </button>
            ) : null}
        </>
    );
};