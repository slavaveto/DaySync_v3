import { useState, useEffect, useRef, useCallback } from 'react';
import { log } from "@/app/init/logger";
import { toast } from "react-hot-toast";
import { showNetworkToast } from "./showNetworkToast";

interface UseNetworkMonitoringProps {
    onNetworkChange?: (status: { isOnline: boolean; isSupabaseReachable: boolean; isFullyOnline: boolean }) => void;
    onConnectionRestored?: () => void;
    onConnectionLost?: () => void;
}

interface NetworkCheckResult {
    isOnline: boolean;
    isSupabaseReachable: boolean;
}

export const useNetworkMonitoring = ({
                                         onNetworkChange,
                                         onConnectionRestored,
                                         onConnectionLost
                                     }: UseNetworkMonitoringProps = {}) => {

    const [isOnline, setIsOnline] = useState(navigator.onLine);
    const [isSupabaseReachable, setIsSupabaseReachable] = useState(true);
    const [lastCheck, setLastCheck] = useState<Date | null>(null);

    // –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ toast –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏
    const offlineToastRef = useRef<string | null>(null);
    const onlineToastRef = useRef<string | null>(null);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ toast –æ –ø–æ—Ç–µ—Ä–µ —Å–µ—Ç–∏
    const showOfflineToast = useCallback(() => {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–Ω–ª–∞–π–Ω toast –µ—Å–ª–∏ –µ—Å—Ç—å
        if (onlineToastRef.current) {
            toast.dismiss(onlineToastRef.current);
            onlineToastRef.current = null;
        }

        const toastId = showNetworkToast({
            type: 'offline',
            title: '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º',
            message: '–†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ',
            duration: Infinity
        });

        offlineToastRef.current = toastId;
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ toast –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
    const showOnlineToast = useCallback(() => {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ–ª–∞–π–Ω toast –µ—Å–ª–∏ –µ—Å—Ç—å
        if (offlineToastRef.current) {
            toast.dismiss(offlineToastRef.current);
            offlineToastRef.current = null;
        }

        const toastId = showNetworkToast({
            type: 'online',
            title: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            duration: 4000
        });

        onlineToastRef.current = toastId;
    }, []);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
    const checkSupabaseConnectivity = useCallback(async (): Promise<boolean> => {
        try {
            const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
            const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
            const response = await fetch(`${supabaseUrl}/rest/v1/`, {
                method: 'HEAD',
                headers: {
                    'apikey': supabaseKey,
                    'Authorization': `Bearer ${supabaseKey}`
                },
                signal: AbortSignal.timeout(5000)
            });
            return response.ok;
        } catch (error) {
            return false;
        }
    }, []);

    // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    const checkFullConnectivity = useCallback(async (): Promise<NetworkCheckResult> => {
        const basicOnline = navigator.onLine;
        const supabaseOk = basicOnline ? await checkSupabaseConnectivity() : false;

        setLastCheck(new Date());
        return {
            isOnline: basicOnline,
            isSupabaseReachable: supabaseOk
        };
    }, [checkSupabaseConnectivity]);

    // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–±–µ–∫–∏
    const stableOnNetworkChange = useCallback(onNetworkChange || (() => {}), [onNetworkChange]);
    const stableOnConnectionRestored = useCallback(onConnectionRestored || (() => {}), [onConnectionRestored]);
    const stableOnConnectionLost = useCallback(onConnectionLost || (() => {}), [onConnectionLost]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
    useEffect(() => {
        const handleOnline = async () => {
            // log.success("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            setIsOnline(true);

            const supabaseOk = await checkSupabaseConnectivity();
            setIsSupabaseReachable(supabaseOk);

            const newStatus = {
                isOnline: true,
                isSupabaseReachable: supabaseOk,
                isFullyOnline: supabaseOk
            };

            // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            if (supabaseOk) {
                showOnlineToast();
            }

            // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±–µ–∫–∏:
            if (onNetworkChange) stableOnNetworkChange(newStatus);
            if (supabaseOk && onConnectionRestored) stableOnConnectionRestored();

            if (supabaseOk) {
                // log.success("‚úÖ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω - –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è!");
            } else {
                // log.warning("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –µ—Å—Ç—å, –Ω–æ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        };

        const handleOffline = () => {
            // log.warning("üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º");
            setIsOnline(false);
            setIsSupabaseReachable(false);

            // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –æ –ø–æ—Ç–µ—Ä–µ —Å–µ—Ç–∏
            showOfflineToast();

            const newStatus = {
                isOnline: false,
                isSupabaseReachable: false,
                isFullyOnline: false
            };

            // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±–µ–∫–∏:
            if (onNetworkChange) stableOnNetworkChange(newStatus);
            if (onConnectionLost) stableOnConnectionLost();
        };

        window.addEventListener('online', handleOnline);
        window.addEventListener('offline', handleOffline);

        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–ï–ó setLastCheck
        checkSupabaseConnectivity().then(supabaseOk => {
            setIsSupabaseReachable(supabaseOk);
        });

        return () => {
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
        };
    }, [checkSupabaseConnectivity, showOnlineToast, showOfflineToast, stableOnNetworkChange, stableOnConnectionRestored, stableOnConnectionLost]);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Supabase (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω)
    useEffect(() => {
        if (!isOnline) return;

        const interval = setInterval(async () => {
            const supabaseOk = await checkSupabaseConnectivity();
            if (supabaseOk !== isSupabaseReachable) {
                setIsSupabaseReachable(supabaseOk);

                const newStatus = {
                    isOnline,
                    isSupabaseReachable: supabaseOk,
                    isFullyOnline: isOnline && supabaseOk
                };

                // ‚úÖ –ö–æ–ª–±–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏:
                if (onNetworkChange) stableOnNetworkChange(newStatus);

                if (supabaseOk) {
                    // log.success("‚úÖ Supabase —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!");
                    showOnlineToast();
                    if (onConnectionRestored) stableOnConnectionRestored();
                } else {
                    // log.warning("‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å —Å Supabase");
                    showOfflineToast();
                    if (onConnectionLost) stableOnConnectionLost();
                }
            }
        }, 30000);

        return () => clearInterval(interval);
    }, [isOnline, isSupabaseReachable, checkSupabaseConnectivity, showOnlineToast, showOfflineToast, stableOnNetworkChange, stableOnConnectionRestored, stableOnConnectionLost]);

    return {
        isOnline,
        isSupabaseReachable,
        isFullyOnline: isOnline && isSupabaseReachable,
        lastCheck,
        checkFullConnectivity
    };
};