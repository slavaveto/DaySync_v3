import React, { useState, useEffect, useRef } from "react";
import { MdCloudUpload } from "react-icons/md";
import clsx from "clsx";
import { Spinner } from "@heroui/react";
import toast from "react-hot-toast";
import { compareWithRemote } from '@/app/init/sync/compareWithRemote';
import { useDevice } from '@/app/init/providers/MobileDetect';
import { createAuthenticatedClient } from "@/app/init/dbase/supabaseClient";
import { useAuth } from '@clerk/nextjs';

import {CloudUpload, CloudDownload, SquareCheckBig, X} from "lucide-react";



import { useMainContext } from "@/app/context";
import {log} from "@/app/init/logger";
import {usePerformUpload} from "@/app/init/sync/usePerformUpload";

export const UploadData = () => {
    const {
        items, setItems, hasLocalChanges, setHasLocalChanges, isUserActive, clearAllToasts,
        syncTimeoutProgress, setSyncTimeoutProgress, isUploadingData, setIsUploadingData, userId,
    } = useMainContext();

    const { getToken } = useAuth();

    const { isMobile, isDesktop } = useDevice();

    const [wasSyncedOk, setWasSyncedOk] = useState(false);
    const user_id = userId;

    const timeoutRef = useRef<NodeJS.Timeout | null>(null);
    const timeoutStartRef = useRef<number | null>(null);
    const progressIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const lastHasLocalChanges = useRef<boolean>(hasLocalChanges);
    const currentStepRef = useRef(0);


    const { performUpload } = usePerformUpload({
        onComplete: (result) => {
            const hasDiscrepancies =
                result.missingInLocal.length > 0 ||
                result.missingInRemote.length > 0 ||
                result.modified.length > 0;

            if (hasDiscrepancies) {
                log.warning("–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å –±–∞–∑–æ–π!");
            } else {
                log.success("–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!");
            }
        }
    });


    useEffect(() => {
        const totalDuration = 3000;
        const delayBeforeCountdown = 1000; // üü¢ –≤–æ—Ç —ç—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–∞—Å—Ç 100% –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è!
        const realCountdownStart = Date.now() + delayBeforeCountdown// üü° —É—á–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É!

        const startCountdown = (startTime: number) => {
            timeoutStartRef.current = startTime;
            currentStepRef.current = -1; // üü¢ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            progressIntervalRef.current = setInterval(() => {
                const elapsed = Date.now() - timeoutStartRef.current!;

                const smoothProgress = Math.max(1, 100 - (elapsed / totalDuration) * 100);
                setSyncTimeoutProgress(smoothProgress);

                if (elapsed >= totalDuration) {
                    clearInterval(progressIntervalRef.current!);
                    progressIntervalRef.current = null;

                    setTimeout(() => {
                        handleSync();
                    }, 200); // üü¢ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–æ—Ä–∏—Å–æ–≤–∫–∏
                }
            }, 50);
        };

        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
        }
        if (progressIntervalRef.current) {
            clearInterval(progressIntervalRef.current);
            progressIntervalRef.current = null;
        }

        if (isUploadingData) {
            setSyncTimeoutProgress(0);
            timeoutStartRef.current = null;
            return;
        }

        const justAppeared = hasLocalChanges && !lastHasLocalChanges.current;
        lastHasLocalChanges.current = hasLocalChanges;

        if (!isUserActive && !hasLocalChanges) {
            setSyncTimeoutProgress(0);
            timeoutStartRef.current = null;
            return;
        }

        if (isUserActive) {
            setSyncTimeoutProgress(100);
            timeoutStartRef.current = null;
            return;
        }

        if (justAppeared) {
            setSyncTimeoutProgress(100);
            timeoutStartRef.current = null;

            timeoutRef.current = setTimeout(() => {
                startCountdown(realCountdownStart);
            }, delayBeforeCountdown);

            return;
        }

        // üü¢ –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫:
        startCountdown(Date.now());

        return () => {
            if (timeoutRef.current) clearTimeout(timeoutRef.current);
            if (progressIntervalRef.current) clearInterval(progressIntervalRef.current);
        };

    }, [hasLocalChanges, isUploadingData, isUserActive]);



    // const performSync = async () => {
    //     // ‚úÖ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å:
    //     if (!isFullyOnline) {
    //         log.warning("üî¥ –ù–µ—Ç —Å–≤—è–∑–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ");
    //         // –ü–æ–º–µ—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ "–Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
    //         markItemsForSync(items);
    //         return;
    //     }
    //
    //     // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å
    //     try {
    //         await uploadToServer();
    //         log.success("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!");
    //     } catch (error) {
    //         log.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
    //     }
    // };



    const handleSync = async () => {
        if (isUploadingData || !hasLocalChanges || !user_id) {
            return;
        }

        // const syncPromise = performSync();

        clearAllToasts()
        log.start("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...");
        performUpload()



    };

    // –ù–û–í–´–ô —ç—Ñ—Ñ–µ–∫—Ç: —Å–ª—É—à–∞–µ–º power-status –∏–∑ Electron
    useEffect(() => {
        // –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!(window as any).electron?.onPowerStatus) return;

        const unsubscribe = (window as any).electron.onPowerStatus(
            ({ status }: { status: string; message: string }) => {
                // –µ—Å–ª–∏ —É—Ö–æ–¥–∏–º –≤ —Å–æ–Ω –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω ‚Äî —Ñ–æ—Ä—Å–∏–º —Å–∏–Ω–∫
                if ((status === "suspend" || status === "locked") &&
                    hasLocalChanges &&
                    !isUploadingData) {
                    console.log('üü¢ –ø–æ–π–º–∞–ª suspend/locked ‚Äî —Å—Ä–∞–∑—É –≤—ã–≥—Ä—É–∂–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ')
                    if (timeoutRef.current) clearTimeout(timeoutRef.current);
                    if (progressIntervalRef.current) clearInterval(progressIntervalRef.current);

                    handleSync();
                }
            }
        );
        return () => {
            unsubscribe();
        };
    }, [hasLocalChanges, isUploadingData, handleSync]);





    useEffect(() => {
        const handleForceSync = () => {
            console.log('üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞');
            handleSync();
        };

        window.addEventListener('force-sync', handleForceSync);
        return () => window.removeEventListener('force-sync', handleForceSync);
    }, []);





    useEffect(() => {
        if (!isMobile) return;                // –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è iOS/Android PWA

        /** –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ —Ñ–æ–Ω ‚Äì –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É */
        const trySyncBeforeSleep = () => {
            // Safari/WebView –Ω–∞ iOS —Å–Ω–∞—á–∞–ª–∞ –±—Ä–æ—Å–∞–µ—Ç visibilitychange ‚Üí 'hidden',
            // –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–æ—Ç–µ–Ω –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤—ã–≥—Ä—É–∂–∞–µ—Ç JS-–∫–æ–Ω—Ç–µ–∫—Å—Ç.
            if (
                document.visibilityState === 'hidden' &&
                hasLocalChanges &&                // –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                !isUploadingData                  // –º—ã –Ω–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∞–ø–ª–æ–∞–¥–∞
            ) {
                /* –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–≤—ë–º —Ç–∞–π–º–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ —Å–Ω–æ–≤–∞ */
                if (timeoutRef.current) clearTimeout(timeoutRef.current);
                if (progressIntervalRef.current) clearInterval(progressIntervalRef.current);

                handleSync();                     // üî• —Ñ–æ—Ä—Å-–∞–ø–ª–æ–∞–¥
            }
        };

        /* iOS PWA –Ω–∞–¥—ë–∂–Ω–µ–µ –ª–æ–≤–∏—Ç—å –æ–±–æ–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ */
        document.addEventListener('visibilitychange', trySyncBeforeSleep);
        window.addEventListener('pagehide', trySyncBeforeSleep);

        return () => {
            document.removeEventListener('visibilitychange', trySyncBeforeSleep);
            window.removeEventListener('pagehide', trySyncBeforeSleep);
        };
    }, [
        isMobile,
        hasLocalChanges,
        isUploadingData,
        handleSync,            // –µ—Å–ª–∏ –≤—ã–Ω–µ—Å–µ—Ç–µ –≤ useCallback ‚Äì –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞
    ]);

    const disabled = !hasLocalChanges || isUploadingData || isUserActive;

    const showButton = false;

    return (
        <>
            {!isMobile && showButton && (
                <button
                    className={clsx(
                        "inline-flex items-center justify-center",      // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
                        " transition-opacity duration-200 will-change-[opacity]",
                        disabled && "!opacity-50",

                        hasLocalChanges
                            ? "text-warning !opacity-100"
                            : "text-default"
                    )}

                    onClick={handleSync}
                    disabled={disabled}
                >
                    {isUploadingData ? (
                        <Spinner size="sm" color={"warning"} className="w-[26px] h-[20px]" />
                    ) : (
                        <MdCloudUpload
                            size={isMobile ? 26 : 22}
                            className={clsx("w-[26px] block leading-none translate-z-0",
                            )}
                        />
                    )}
                </button>
            )}
        </>
    );
};
