import React, {useEffect, useRef, useState} from "react";
import {useMainContext} from "@/app/context";
import {log} from "@/app/init/logger";
import {useAuth} from '@clerk/nextjs';
import type {ItemType} from "@/app/types";

import usePersistentState from "@/app/init/usePersistentState";
import {useDevice} from "@/app/init/providers/MobileDetect";

import {realtimeSubscription} from "./realtimeSubscription";
import {testSubscription} from "./testSubscription";
import {reloadAllItems} from "./reloadAllItems";

export const SyncData = () => {

    const {
        items, setItems, userId, isUserActive, isUploadingData, hasLocalChanges, clearAllToasts,
        setIsDownloadingData, setSyncHighlight
    } = useMainContext();

    const {getToken} = useAuth();

    const {isMobile, isDesktop} = useDevice();

    const [wasSyncedOk, setWasSyncedOk] = useState(false);
    const user_id = userId;

    let isSetupInProgress = false;

    const onPayloadRef = useRef<((payload: any) => void) | null>(null);

    const [isSettingUpSubscription, setIsSettingUpSubscription] = useState(false);

    const [deviceId] = usePersistentState<string>(
        "deviceId",
        `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    );



    useEffect(() => {
        if (!user_id) return;

        const reloadParams = {
            user_id,
            getToken,
            setItems,
            setIsDownloadingData,
            setSyncHighlight,
            setWasSyncedOk,
            lastReloadTimeRef,
            highlightBufferRef,
            highlightClearTimeoutRef,
            isReloadingData,
            setIsReloadingData
        };

        reloadAllItems(reloadParams);

        log.start("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
        setupSubscription();


    }, [user_id]);

    useEffect(() => {
        if (!user_id) return;
        if (!(window as any).electron?.onPowerStatus) return;

        let didResume = false;  // —Ñ–ª–∞–∂–æ–∫, —á—Ç–æ –º—ã —É–∂–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ resumed
        let powerEventTimeout: NodeJS.Timeout | null = null;

        const unsubscribe = (window as any).electron.onPowerStatus(
            ({status}: { status: string; message: string }) => {

                clearAllToasts()

                log('RESUMED - –∫–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–∞—É–∑–∞ 3—Å–µ–∫...');
                console.log("RESUMED - –∫–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–∞—É–∑–∞ 3—Å–µ–∫...")

                // –ü—Ä–∏ —É—Ö–æ–¥–µ –≤ —Å–æ–Ω –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–∂–æ–∫
                if (status === "suspend" || status === "locked") {
                    didResume = false;
                    return;
                }
                // –ï—Å–ª–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å
                if (status === "resumed") {
                    didResume = true;
                }
                // –ï—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –Ω–æ –¥–æ —ç—Ç–æ–≥–æ –ù–ï –±—ã–ª–æ resumed
                else if (status === "unlocked" && !didResume) {

                } else {
                    // console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: ${status}, didResume: ${didResume}`);
                    return;
                }

                if (powerEventTimeout) {
                    clearTimeout(powerEventTimeout);
                }

                powerEventTimeout = setTimeout(async () => {
                    log.start('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–∏...');

                    const isNetworkOk = await checkNetworkConnectivity();

                    if (!isNetworkOk) {
                        log.warning('–°–µ—Ç—å –µ—â–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å, –∂–¥–µ–º –µ—â–µ 5 —Å–µ–∫—É–Ω–¥...');

                        setTimeout(async () => {
                            log.warning('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏...');
                            const isNetworkOkRetry = await checkNetworkConnectivity();
                            if (isNetworkOkRetry) {
                                log.success('–°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞!');
                            } else {
                                log.warning('–°–µ—Ç—å –≤—Å–µ –µ—â–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                            }
                        }, 5000);

                    } else {
                        log.success('–°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É!');
                    }

                    log.start('–ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...');
                    performSubscriptionRecovery();

                }, 3000);
            });
        return () => {
            unsubscribe();
        };
    }, [user_id, hasLocalChanges, isUploadingData]);

    // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ç–µ—Å—Ç–æ–º
    const performSubscriptionRecovery = () => {
        console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...");

        if (!user_id) {
            console.log("‚ùå user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ");
            return;
        }

        // showSyncToast("–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è...", 'loading');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (hasLocalChanges || isUploadingData) {
            console.log("‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞");
            return;
        }

        const reloadParams = {
            user_id,
            getToken,
            setItems,
            setIsDownloadingData,
            setSyncHighlight,
            setWasSyncedOk,
            lastReloadTimeRef,
            highlightBufferRef,
            highlightClearTimeoutRef,
            isReloadingData,
            setIsReloadingData
        };
        reloadAllItems(reloadParams);

        setTimeout(() => {

            setupSubscription();

        }, 1000);

        // –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(async () => {
            console.log("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏...");
            log.start("–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏...")
            // toast("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...", {
            //     duration: 1500,
            //     position: "bottom-center"
            // });

            const testParams = {
                user_id,
                deviceId,
                getToken,
                onPayloadRef
            };

            const isWorking = await testSubscription(testParams);

            if (!isWorking) {
                console.log("‚ùå –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω!");

                const shouldRestart = confirm(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?"
                );

                if (shouldRestart) {
                    window.location.reload();
                }
            } else {
                console.log("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–µ–Ω!");
                log.success("–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–µ–Ω!")
                // log.success("–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–µ–Ω!")
            }
        }, 3000);
        // }, 0);
        // });
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
    const checkNetworkConnectivity = async (): Promise<boolean> => {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Supabase API –≤–º–µ—Å—Ç–æ Google
            const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
            const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
            const response = await fetch(`${supabaseUrl}/rest/v1/`, {
                method: 'HEAD',
                headers: {
                    'apikey': supabaseKey,
                    'Authorization': `Bearer ${supabaseKey}`
                },
                signal: AbortSignal.timeout(5000)
            });
            // console.log("üåê Supabase connectivity check:", response.status);
            return response.ok;
        } catch (error) {
            // console.log("‚ùå Supabase connectivity failed:", error);
            return false;
        }
    };

    const lastReloadTimeRef = useRef<number>(0); //


    const [isReloadingData, setIsReloadingData] = useState(false);
    const highlightBufferRef = useRef<number[]>([]);
    const highlightClearTimeoutRef = useRef<NodeJS.Timeout | null>(null);


    const setupSubscription = async () => {



        const callId = Math.random().toFixed(3);
        // console.log(`üîå setupSubscription –í–•–û–î #${callId} - isSettingUpSubscription: ${isSettingUpSubscription}`);

        if (isSettingUpSubscription) {
            // console.log(`‚ö†Ô∏è setupSubscription #${callId} –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`);
            return;
        }

        isSetupInProgress = true; // ‚Üê —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º
        // console.log(`üîí setupSubscription #${callId} –ë–õ–û–ö–ò–†–£–ï–ú —Ñ–ª–∞–≥`);
        setIsSettingUpSubscription(true);
        // console.log("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ setupSubscription");

        try {
            // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è realtime –ø–æ–¥–ø–∏—Å–∫–∏

            const token = await getToken({template: 'supabase'});
            if (!token) {
                // console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è realtime –ø–æ–¥–ø–∏—Å–∫–∏');
                setIsSettingUpSubscription(false);

                return;
            }

            await realtimeSubscription(user_id ?? "", token, (payload) => {

                // console.log("üéØ payload:", payload);
                // console.log("üì° –í—ã–∑—ã–≤–∞–µ–º subscribeToItems...");
                // console.log("üéØ –°–û–ë–´–¢–ò–ï –≤ setupSubscription:", payload.eventType, payload.new?.title);

                // ‚úÖ –ò–ì–ù–û–†–ò–†–û–í–ê–¢–¨ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                const removed = payload.old as Partial<ItemType>;
                const incoming = (payload.new ?? payload.old) as Partial<ItemType>;

                if (onPayloadRef.current) {
                    onPayloadRef.current(payload);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                if (incoming?.title?.startsWith('__SUBSCRIPTION_TEST_')) {
                    // console.log("üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å:", incoming.title);
                    // console.log("üß™ –ù–∞—à–∞ –∑–∞–ø–∏—Å—å:", `__SUBSCRIPTION_TEST_${deviceId}__`);

                    if (incoming.title === `__SUBSCRIPTION_TEST_${deviceId}__`) {
                        // console.log("‚úÖ –≠–¢–û –ù–ê–®–ê –ó–ê–ü–ò–°–¨ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º");
                    } else {
                        // console.log("‚ùå –≠–¢–û –ß–£–ñ–ê–Ø –ó–ê–ü–ò–°–¨ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
                        return; // –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    }
                }

                if (payload.eventType === "DELETE") {
                    // const lastAction = [...actionLogRef.current]
                    //     .reverse()
                    //     .find(entry => entry.item.id === removed.id && entry.action === "Delete");
                    // if (!lastAction) {
                    //     reloadAllItems();
                    // }
                    // return;
                }

                if (!incoming?.id) return;

                if ((payload.eventType === "INSERT" || payload.eventType === "UPDATE") && incoming) {
                    const localItems = JSON.parse(localStorage.getItem("items") || "[]");
                    const local = localItems.find((item: ItemType) => item.id === incoming.id);

                    if (!user_id) return;

                    if (!local) {
                        // reloadAllItems(incoming.id);
                        const reloadParams = {
                            user_id,
                            getToken,
                            setItems,
                            setIsDownloadingData,
                            setSyncHighlight,
                            setWasSyncedOk,
                            lastReloadTimeRef,
                            highlightBufferRef,
                            highlightClearTimeoutRef,
                            isReloadingData,
                            setIsReloadingData
                        };

                        reloadAllItems(reloadParams, incoming.id);

                        return;
                    }

                    if (!incoming.updated_at || !local.updated_at) return;

                    if (new Date(incoming.updated_at) > new Date(local.updated_at)) {
                        // reloadAllItems(incoming.id);

                        const reloadParams = {
                            user_id,
                            getToken,
                            setItems,
                            setIsDownloadingData,
                            setSyncHighlight,
                            setWasSyncedOk,
                            lastReloadTimeRef,
                            highlightBufferRef,
                            highlightClearTimeoutRef,
                            isReloadingData,
                            setIsReloadingData
                        };

                        reloadAllItems(reloadParams, incoming.id);

                    }
                }
            });
            //console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
        } finally {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            log.success("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
            setTimeout(() => {
                setIsSettingUpSubscription(false);
                isSetupInProgress = false;
            }, 1000);
        }

    };


    // const [waitWake, setWaitWake] = useState(false);
    // useEffect(() => {
    //     if (waitWake && user_id) {
    //         setWaitWake(false);
    //         const setupParams = {
    //             user_id,
    //             deviceId,
    //             getToken,
    //             isSettingUpSubscription,
    //             setIsSettingUpSubscription,
    //             onPayloadRef
    //         };
    //         setupSubscription(setupParams);
    //
    //         const reloadParams = {
    //             user_id,
    //             getToken,
    //             setItems,
    //             setIsDownloadingData,
    //             setSyncHighlight,
    //             setWasSyncedOk,
    //             lastReloadTimeRef,
    //             highlightBufferRef,
    //             highlightClearTimeoutRef,
    //             isReloadingData,
    //             setIsReloadingData
    //         };
    //
    //         reloadAllItems(reloadParams);
    //         // reloadAllItems();
    //     }
    // }, [waitWake, user_id]);



    return null;
};
