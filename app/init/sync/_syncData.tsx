import {useEffect, useRef} from "react";
import {useMainContext} from "@/app/context";
import {log} from "@/app/init/logger";
import {useAuth} from '@clerk/nextjs';
import {toast} from "react-hot-toast";
import {Button} from "@heroui/react";

import usePersistentState from "@/app/init/usePersistentState";
import {useDevice} from "@/app/init/providers/MobileDetect";

import {useSetupSubscription} from "./useSetupSubscription";
import {useTestSubscription} from "./useTestSubscription";
import {useReloadAllItems} from "./useReloadAllItems";
import {useNetworkMonitoring} from "./useNetworkMonitoring";

export const SyncData = () => {

    const {
        items, setItems, userId, isUserActive, isUploadingData, hasLocalChanges, clearAllToasts,
        setIsDownloadingData, setSyncHighlight, setFirstLoadFadeIn
    } = useMainContext();

    const {getToken} = useAuth();

    const {isMobile, isDesktop} = useDevice();

    const user_id = userId;

    const onPayloadRef = useRef<((payload: any) => void) | null>(null);

    const [deviceId] = usePersistentState<string>(
        "deviceId",
        `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    );

    const {isOnline, isSupabaseReachable, isFullyOnline, checkFullConnectivity} = useNetworkMonitoring({
        onConnectionRestored: () => {
            log.success("üöÄ –°–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é!");
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
            if (hasLocalChanges) {
                // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            }
        },
        onConnectionLost: () => {
            log.warning("üíæ –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ");
        },
        onNetworkChange: (status) => {
            console.log("üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è:", status);
        }
    });

    // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
    // useEffect(() => {
    //     if (isFullyOnline && hasLocalChanges) {
    //         log.start("–°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...");
    //         // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    //     }
    // }, [isFullyOnline, hasLocalChanges]);

    useEffect(() => {
        if (!isMobile) return; // –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª–∫–∏!

        function onVisibilityChange() {
            if (document.visibilityState !== 'visible') return;

            requestAnimationFrame(() => {
                // –ó–¥–µ—Å—å state –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
                if (hasLocalChanges || isUploadingData) return;

                // üîÑ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å!
                log.start("RELOAD, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏...");

                checkFullConnectivity().then(networkStatus => {
                    if (!networkStatus.isSupabaseReachable) {
                        log.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ");
                        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω
                        return;
                    }

                    log.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");

                    reloadAllItems(undefined, () => {
                        console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

                        setTimeout(() => {
                            log.start("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")

                            setupSubscription(() => {
                                console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");

                                // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
                            });

                        }, 1000);
                    });
                });
            });
        }

        document.addEventListener("visibilitychange", onVisibilityChange);
        return () => {
            document.removeEventListener("visibilitychange", onVisibilityChange);
        };
    }, [isMobile, user_id, hasLocalChanges, isUploadingData]);

    const {reloadAllItems} = useReloadAllItems();
    const {testSubscription} = useTestSubscription({
        deviceId,
        onPayloadRef
    });
    const {setupSubscription} = useSetupSubscription({
        onPayloadRef,
    });

    useEffect(() => {
        if (!user_id) return;

        // üîÑ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å!
        log.start("RELOAD, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏...");

        checkFullConnectivity().then(networkStatus => {
            if (!networkStatus.isSupabaseReachable) {
                log.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ");
                // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω
                return;
            }

            log.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");

            reloadAllItems(undefined, () => {
                console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

                setTimeout(() => {
                    log.start("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")

                    setupSubscription(() => {
                        console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");


                        // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    });

                }, 1000);
            });
        });

    }, [user_id]);

    useEffect(() => {
        if (!user_id) return;
        if (!(window as any).electron?.onPowerStatus) return;

        let didResume = false;  // —Ñ–ª–∞–∂–æ–∫, —á—Ç–æ –º—ã —É–∂–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ resumed
        let powerEventTimeout: NodeJS.Timeout | null = null;

        const unsubscribe = (window as any).electron.onPowerStatus(
            ({status}: { status: string; message: string }) => {

                clearAllToasts()

                log('RESUMED, –ø–∞—É–∑–∞ 3—Å–µ–∫...');
                console.log("RESUMED - –∫–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–∞—É–∑–∞ 3—Å–µ–∫...")

                // –ü—Ä–∏ —É—Ö–æ–¥–µ –≤ —Å–æ–Ω –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–∂–æ–∫
                if (status === "suspend" || status === "locked") {
                    didResume = false;
                    return;
                }
                // –ï—Å–ª–∏ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å
                if (status === "resumed") {
                    didResume = true;
                }
                // –ï—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –Ω–æ –¥–æ —ç—Ç–æ–≥–æ –ù–ï –±—ã–ª–æ resumed
                else if (status === "unlocked" && !didResume) {

                } else {
                    // console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: ${status}, didResume: ${didResume}`);
                    return;
                }

                if (powerEventTimeout) {
                    clearTimeout(powerEventTimeout);
                }

                powerEventTimeout = setTimeout(async () => {

                    performSubscriptionRecovery();

                }, 3000);
            });
        return () => {
            unsubscribe();
        };
    }, [user_id, hasLocalChanges, isUploadingData]);

    // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ç–µ—Å—Ç–æ–º
    const performSubscriptionRecovery = () => {
        log.start("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏...");

        checkFullConnectivity().then(networkStatus => {
            if (!networkStatus.isSupabaseReachable) {
                log.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ");
                // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω
                return;
            }

            log.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");

            if (!user_id) {
                console.log("‚ùå user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ");
                return;
            }

            if (hasLocalChanges || isUploadingData) {
                console.log("‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞");
                return;
            }

            reloadAllItems(undefined, () => {
                console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

                setTimeout(() => {
                    log.start("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")

                    setupSubscription(() => {
                        console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");
                        // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏

                        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–°–¢ –ü–û–î–ü–ò–°–ö–ò –ü–†–Ø–ú–û –ó–î–ï–°–¨
                        setTimeout(async () => {
                            console.log("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏...");
                            log.start("–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏...")

                            await testSubscription((success) => {
                                if (success) {
                                    log.success("–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–µ–Ω!")

                                } else {

                                    showSyncErrorToast()
                                }
                            });

                        }, 1000);

                    });

                }, 1000);
            });
        });

    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ toast –æ–± –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const showSyncErrorToast = () => {
        toast((t) => (
            <div
                style={{
                position: 'relative',
                display: 'flex',
                flexDirection: 'column',
                gap: '12px',
                padding: '10px',
                minWidth: '300px'
            }}>
                {/* –ö—Ä–µ—Å—Ç–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
                <button
                    onClick={() => toast.dismiss(t.id)}
                    style={{
                        position: 'absolute',
                        top: '0px',
                        right: '0px',
                        background: 'none',
                        border: 'none',
                        fontSize: '18px',
                        cursor: 'pointer',
                        color: '#666',
                        lineHeight: '1'
                    }}
                    title="–ó–∞–∫—Ä—ã—Ç—å"
                >
                    √ó
                </button>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <div className={"text-danger-500"} style={{
                    fontWeight: 'bold',
                    paddingRight: '20px' // –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞
                }}>
                    ‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                </div>
                <div style={{
                    fontSize: '14px',
                    color: '#666',
                    lineHeight: '1.4'
                }}>
                    –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ */}
                <Button
                    color={"danger"}
                    className={"!w-[150px]"}
                    onClick={() => {
                    toast.dismiss(t.id);
                    setTimeout(() => {
                        setFirstLoadFadeIn(false);
                        setTimeout(() => location.reload(), 500);
                    }, 500);
                }}
                >
                    –ü–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å
                </Button>
            </div>
        ), {
            duration: Infinity,
            position: "top-right",
            className: "!bg-content2"
        });
    }

    return null;
};
