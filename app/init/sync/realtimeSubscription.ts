// utils/realtimeSubscription.ts
import { createAuthenticatedClient } from "@/app/init/dbase/supabaseClient";
import type { RealtimeChannel, SupabaseClient } from '@supabase/supabase-js';

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
let activeChannels: RealtimeChannel[] = [];
let authClient: SupabaseClient | null = null;

export async function realtimeSubscription(
    user_id: string,
    jwtToken: string,
    onPayload: (payload: any) => void
) {
    console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ realtime –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id:', user_id);

    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –∫–∞–Ω–∞–ª—ã
    console.log('üõë –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–Ω–∞–ª—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', activeChannels.length);

    for (const oldChannel of activeChannels) {
        try {
            await oldChannel.unsubscribe();
            console.log('‚úÖ –°—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª –æ—Ç–ø–∏—Å–∞–Ω:', oldChannel.topic);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –∫–∞–Ω–∞–ª–∞:', error);
        }
    }

    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    activeChannels = [];

    // ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    authClient = createAuthenticatedClient(jwtToken);

    // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–∂–µ
    const existingChannels = authClient.getChannels().filter(
        (ch: RealtimeChannel) => ch.topic.includes("items_sync")
    );

    for (const existingChannel of existingChannels) {
        try {
            await authClient.removeChannel(existingChannel);
            console.log('üõë –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª –∏–∑ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', existingChannel.topic);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
        }
    }

    // ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
    console.log('üì° –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É...');

    const channel = authClient
        .channel("items_sync")
        .on(
            "postgres_changes",
            {
                event: "*",
                schema: "public",
                table: "items",
            },
            (payload: any) => {
                console.log('üéØ –ü–æ–ª—É—á–µ–Ω–æ realtime —Å–æ–±—ã—Ç–∏–µ:', payload.eventType, '–¥–ª—è –∑–∞–ø–∏—Å–∏ ID:', payload.new?.id || payload.old?.id);

                // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º user_id
                const incomingUserId =
                    (payload.new as Record<string, any>)?.user_id ||
                    (payload.old as Record<string, any>)?.user_id;

                if (incomingUserId !== user_id) {
                    console.log('üü• –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —á—É–∂–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', incomingUserId);
                    return;
                }

                console.log('‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
                onPayload(payload);
            }
        )
        .subscribe((status, error) => {
            console.log('üì° –°—Ç–∞—Ç—É—Å realtime –ø–æ–¥–ø–∏—Å–∫–∏:', status);
            if (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
            } else if (status === 'SUBSCRIBED') {
                console.log('üü¢ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
            }
        });

    // ‚úÖ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
    activeChannels.push(channel);

    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è user_id: ${user_id}, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${activeChannels.length}`);
}

// ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
export async function clearAllSubscriptions() {
    console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

    for (const channel of activeChannels) {
        try {
            await channel.unsubscribe();
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–∞:', error);
        }
    }

    activeChannels = [];
    authClient = null;

    console.log('‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã');
}