import {toast} from "react-hot-toast";

class Logger {
    private globalContext: string = '';

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã/–ø—Ä–æ—Ü–µ—Å—Å–∞
    setContext(context: string) {
        this.globalContext = context;
        // console.log(`üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${context}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    getFullContext(line?: number): string {
        if (this.globalContext) {
            return line ? `${this.globalContext}:${line}` : this.globalContext;
        }
        return line ? `:${line}` : '';
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è toast'–æ–≤ (–∫–∞–∫ –≤ DownloadButton)
    showToast(message: string, type: 'success' | 'error' | 'loading' | 'info' = 'info') {

        const options = {
            duration: 3000,
            position: "bottom-center" as const,
            className: 'border border-divider !bg-content2 !text-foreground',
        };

        switch (type) {
            case 'error':
                return toast.error(`${message}`, options);
            case 'loading':
                return toast.loading(`${message}`, options);
            case 'success':
                return toast.success(`${message}`, options);
            default:
                return toast(`${message}`, options);
        }
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    start(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`üöÄ${context ? ` [${context}]` : ''} ${message}`, ...args);
    }

    end(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`üèÅ${context ? ` [${context}]` : ''} ${message}`, ...args);
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
const logger = new Logger();

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è log
function log(message: string, line?: number, ...args: any[]) {
    const context = logger.getFullContext(line);
    console.log(`${context ? `[${context}] ` : ''}${message}`, ...args);
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ —Ñ—É–Ω–∫—Ü–∏–∏ log
log.start = (message: string, line?: number, ...args: any[]) => {
    logger.start(message, line, ...args);
};

log.end = (message: string, line?: number, ...args: any[]) => {
    logger.end(message, line, ...args);
};

log.setContext = (context: string) => {
    logger.setContext(context);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é log
export { log };

// console.log('üöÄ Function Logger –≥–æ—Ç–æ–≤!');