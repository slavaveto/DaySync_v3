import {toast} from "react-hot-toast";

class Logger {
    private globalContext: string = '';
    private toastsEnabled: boolean = false; // –î–û–ë–ê–í–ò–õ–ò –Ω–∞—Å—Ç—Ä–æ–π–∫—É toast'–æ–≤

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã/–ø—Ä–æ—Ü–µ—Å—Å–∞
    setContext(context: string) {
        this.globalContext = context;
    }

    // –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è toast'–æ–≤
    setToasts(enabled: boolean) {
        this.toastsEnabled = enabled;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    getFullContext(line?: number): string {
        if (this.globalContext) {
            return line ? `${this.globalContext}:${line}` : this.globalContext;
        }
        return line ? `:${line}` : '';
    }

    clearToasts() {
        toast.dismiss();
        console.log('üóëÔ∏è –í—Å–µ toast\'—ã –æ—á–∏—â–µ–Ω—ã');
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è toast'–æ–≤
    showToast(message: string, type: 'start' | 'success' | 'info' | 'warning' | 'error') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if (!this.toastsEnabled) return;

        let icon = '‚ÑπÔ∏è'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        switch (type) {
            case 'start': icon = 'üöÄ'; break;
            case 'success': icon = '‚úÖ'; break;
            case 'warning': icon = '‚ö†Ô∏è'; break;
            case 'error': icon = '‚ùåÔ∏è'; break;
        }


        const options = {
            duration: Infinity,
            // position: "bottom-left" as const,
            className: '!p-0 !px-2 border border-divider !bg-content2 !text-foreground text-[12px]',
            icon: icon
        };

        return toast(`${message}`, options);
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    start(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`üöÄ${context ? ` [${context}]` : ''} ${message}`, ...args);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if (this.toastsEnabled) {
            this.showToast(message, 'start');
        }
    }

    success(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`‚úÖ${context ? ` [${context}]` : ''} ${message}`, ...args);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if (this.toastsEnabled) {
            this.showToast(message, 'success');
        }
    }

    warning(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`‚ùåÔ∏èÔ∏è${context ? ` [${context}]` : ''} ${message}`, ...args);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if (this.toastsEnabled) {
            this.showToast(message, 'warning');
        }
    }

    error(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`‚ö†Ô∏è${context ? ` [${context}]` : ''} ${message}`, ...args);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if (this.toastsEnabled) {
            this.showToast(message, 'error');
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
const logger = new Logger();

// –§—É–Ω–∫—Ü–∏—è log
function log(message: string, line?: number, ...args: any[]) {
    const context = logger.getFullContext(line);
    console.log(`‚ÑπÔ∏è ${context ? `[${context}] ` : ''}${message}`, ...args);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if (logger['toastsEnabled']) {
        logger.showToast(message, 'info');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ —Ñ—É–Ω–∫—Ü–∏–∏ log
log.start = (message: string, line?: number, ...args: any[]) => {
    logger.start(message, line, ...args);
};

log.success = (message: string, line?: number, ...args: any[]) => {
    logger.success(message, line, ...args);
};

log.warning = (message: string, line?: number, ...args: any[]) => {
    logger.warning(message, line, ...args);
};

log.error = (message: string, line?: number, ...args: any[]) => {
    logger.error(message, line, ...args);
};


log.setContext = (context: string) => {
    logger.setContext(context);
};

// –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è toast'–∞–º–∏
log.setToasts = (enabled: boolean) => {
    logger.setToasts(enabled);
};

log.clearToasts = () => {
    logger.clearToasts();
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é log
export { log };
