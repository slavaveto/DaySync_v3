import {toast} from "react-hot-toast";

class Logger {
    private globalContext: string = '';
    private toastsEnabled: boolean = false;

    // –î–û–ë–ê–í–õ–Ø–ï–ú –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è toast'–æ–≤
    private activeToasts: Map<string, {id: string, count: number, timeout: NodeJS.Timeout}> = new Map();

    setContext(context: string) {
        this.globalContext = context;
    }

    setToasts(enabled: boolean) {
        this.toastsEnabled = enabled;
    }

    getFullContext(line?: number): string {
        if (this.globalContext) {
            return line ? `${this.globalContext}:${line}` : this.globalContext;
        }
        return line ? `:${line}` : '';
    }

    clearToasts() {
        toast.dismiss();
        // –û—á–∏—â–∞–µ–º –∏ –Ω–∞—à –∫—ç—à
        this.activeToasts.clear();
        console.log('üóëÔ∏è –í—Å–µ toast\'—ã –æ—á–∏—â–µ–Ω—ã');
    }

    // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    showToast(message: string, type: 'start' | 'success' | 'info' | 'warning' | 'error') {
        if (!this.toastsEnabled) return;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const now = new Date();
        const timeString = now.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        const key = `${type}:${message}`;

        let icon = '‚ÑπÔ∏è';
        switch (type) {
            case 'start': icon = 'üöÄ'; break;
            // case 'start': icon = 'üîÑ'; break;
            case 'success': icon = '‚úÖ'; break;
            case 'warning': icon = '‚ö†Ô∏è'; break;
            case 'error': icon = '‚ùåÔ∏è'; break;
        }

        const options = {
            duration: Infinity,
            className: '!p-0 !px-2 border border-divider !bg-content2 !text-foreground text-[12px]',
            icon: icon
        };

        if (this.activeToasts.has(key)) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            const existing = this.activeToasts.get(key)!;
            existing.count++;

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π toast
            toast.dismiss(existing.id);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å —Å—á–µ—Ç—á–∏–∫–æ–º
            // const displayMessage = `${message} (${existing.count})`;
            const displayMessage = `${message} (${existing.count}) (${timeString})`;

            const newId = toast(displayMessage, options);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            clearTimeout(existing.timeout);
            const timeout = setTimeout(() => {
                this.activeToasts.delete(key);
            }, 3000);

            this.activeToasts.set(key, { id: newId, count: existing.count, timeout });

        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π toast
            // const toastId = toast(message, options);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π toast —Å –≤—Ä–µ–º–µ–Ω–µ–º
            const displayMessage = `${message} (${timeString})`;
            const toastId = toast(displayMessage, options);

            const timeout = setTimeout(() => {
                this.activeToasts.delete(key);
            }, 3000);

            this.activeToasts.set(key, { id: toastId, count: 1, timeout });
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    start(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        // console.log(`üîÑ${context ? ` [${context}]` : ''} ${message}`, ...args);
        console.log(`üöÄ${context ? ` [${context}]` : ''} ${message}`, ...args);
        if (this.toastsEnabled) {
            this.showToast(message, 'start');
        }
    }

    success(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`‚úÖ${context ? ` [${context}]` : ''} ${message}`, ...args);
        if (this.toastsEnabled) {
            this.showToast(message, 'success');
        }
    }

    warning(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`‚ùåÔ∏èÔ∏è${context ? ` [${context}]` : ''} ${message}`, ...args);
        if (this.toastsEnabled) {
            this.showToast(message, 'warning');
        }
    }

    error(message: string, line?: number, ...args: any[]) {
        const context = this.getFullContext(line);
        console.log(`‚ö†Ô∏è${context ? ` [${context}]` : ''} ${message}`, ...args);
        if (this.toastsEnabled) {
            this.showToast(message, 'error');
        }
    }
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å...
const logger = new Logger();

function log(message: string, line?: number, ...args: any[]) {
    const context = logger.getFullContext(line);
    console.log(`‚ÑπÔ∏è ${context ? `[${context}] ` : ''}${message}`, ...args);
    if (logger['toastsEnabled']) {
        logger.showToast(message, 'info');
    }
}

log.start = (message: string, line?: number, ...args: any[]) => {
    logger.start(message, line, ...args);
};

log.success = (message: string, line?: number, ...args: any[]) => {
    logger.success(message, line, ...args);
};

log.warning = (message: string, line?: number, ...args: any[]) => {
    logger.warning(message, line, ...args);
};

log.error = (message: string, line?: number, ...args: any[]) => {
    logger.error(message, line, ...args);
};

log.setContext = (context: string) => {
    logger.setContext(context);
};

log.setToasts = (enabled: boolean) => {
    logger.setToasts(enabled);
};

log.clearToasts = () => {
    logger.clearToasts();
};

export { log };